1. FFmpeg with openCL

ffmpeg -init_hw_device opencl=ocl:,device_type=gpu

ffmpeg -init_hw_device vaapi=va:/dev/dri/renderD128 -init_hw_device opencl=ocl@va -loglevel 99

ffmpeg -init_hw_device vaapi=va:/dev/dri/renderD128 -init_hw_device opencl=ocl@va -hwaccel vaapi -hwaccel_device va -hwaccel_output_format vaapi -i INPUT -filter_hw_device ocl -filter_complex '[0:v]hwmap,tonemap_opencl=t=bt2020:tonemap=linear:format=p010[x1]; [x1]hwmap=derive_device=vaapi:reverse=1' -c:v hevc_vaapi -profile 2 OUTPUT

./ffmpeg_g -y -init_hw_device vaapi=va:/dev/dri/renderD128 -init_hw_device opencl=ocl@va -hwaccel vaapi -hwaccel_device va -hwaccel_output_format vaapi -i ../../../Videos/skyfall2-trailer.mp4 -f image2 -r 1 -i overlays/%d.png -an -filter_hw_device ocl -filter_complex '[1:v]format=yuva420p,hwupload[x2]; [0:v]scale_vaapi=1280:720:yuv420p,hwmap[x1]; [x1][x2]overlay_opencl=0:0,program_opencl=test.cl:rotate_image,unsharp_opencl=lx=17:ly=17:la=5,hwmap=derive_device=vaapi:reverse=1,scale_vaapi=1280:720:nv12' -c:v h264_vaapi -frames:v 1000 out.mp4


test.cl:

__kernel void rotate_image(__write_only image2d_t dst,
                           __read_only  image2d_t src,
                           unsigned int index)
{
  const sampler_t sampler = (CLK_NORMALIZED_COORDS_FALSE |
                             CLK_FILTER_LINEAR);

  float angle = (float)index / 100;

  float2 dst_dim = convert_float2(get_image_dim(dst));
  float2 src_dim = convert_float2(get_image_dim(src));

  float2 dst_cen = dst_dim / 2;
  float2 src_cen = src_dim / 2;

  int2   dst_loc = (int2)(get_global_id(0), get_global_id(1));

  float2 dst_pos = convert_float2(dst_loc) - dst_cen;
  float2 src_pos = {
    cos(angle) * dst_pos.x - sin(angle) * dst_pos.y,
    sin(angle) * dst_pos.x + cos(angle) * dst_pos.y
  };
  src_pos = src_pos * src_dim / dst_dim;

  float2 src_loc = src_pos + src_cen;

  if (src_loc.x < 0         || src_loc.y < 0 ||
      src_loc.x > src_dim.x || src_loc.y > src_dim.y)
    write_imagef(dst, dst_loc, 0.5);
  else
    write_imagef(dst, dst_loc, read_imagef(src, sampler, src_loc));
}


Image *VASurface::createSharedVaSurface(Context *context, VASharingFunctions *sharingFunctions,
                                        cl_mem_flags flags, VASurfaceID *surface,
                                        cl_uint plane, cl_int *errcodeRet)


./ffmpeg -i ../../../Videos/a.ts -filter_complex "minterpolate=mi_mode=blend:scd=fdiff:scd_threshold=1" -f null /dev/null

./ffmpeg -i ../../../Videos/a.ts -filter_complex "minterpolate=mi_mode=mci:mc_mode=aobmc:vsbmc=1" -f null /dev/null

git diff d7bc52bf456deba0f32d9fe5c288ec441f1ebef5^..d7bc52bf456deba0f32d9fe5c288ec441f1ebef5 // fast copy (SSE4)

https://blogs.gnome.org/rbultje/2017/07/14/writing-x86-simd-using-x86inc-asm/


./ffmpeg -hwaccel vaapi -hwaccel_output_format vaapi -i ../../../Videos/Allegro_HEVC_Main_HT50_INTRA_07_192x200@60Hz_3.1.bin -f null /dev/null -loglevel 99 // auto insert scale

hls_slice_header

(gdb) bt
#0  configure_output_video_filter (fg=0x555557a9bd80, ofilter=0x555557a52a00, out=0x555557d13300) at fftools/ffmpeg_filter.c:448
#1  0x0000555555653b5f in configure_output_filter (fg=0x555557a9bd80, ofilter=0x555557a52a00, out=0x555557d13300) at fftools/ffmpeg_filter.c:677
#2  0x000055555565576b in configure_filtergraph (fg=0x555557a9bd80) at fftools/ffmpeg_filter.c:1098
#3  0x0000555555666881 in ifilter_send_frame (ifilter=0x555557ce4640, frame=0x555557d39680) at fftools/ffmpeg.c:2187
#4  0x0000555555666ba7 in send_frame_to_filters (ist=0x555557a50a40, decoded_frame=0x555557d39680) at fftools/ffmpeg.c:2268
#5  0x0000555555667a14 in decode_video (ist=0x555557a50a40, pkt=0x7fffffffd030, got_output=0x7fffffffd018, duration_pts=0x7fffffffd028, eof=0, decode_failed=0x7fffffffd020)
    at fftools/ffmpeg.c:2469
#6  0x0000555555668437 in process_input_packet (ist=0x555557a50a40, pkt=0x7fffffffd270, no_eof=0) at fftools/ffmpeg.c:2623
#7  0x000055555566fe28 in process_input (file_index=0) at fftools/ffmpeg.c:4505
#8  0x00005555556703e7 in transcode_step () at fftools/ffmpeg.c:4625
#9  0x0000555555670564 in transcode () at fftools/ffmpeg.c:4679
#10 0x0000555555670f34 in main (argc=13, argv=0x7fffffffdbd8) at fftools/ffmpeg.c:4886

gdb) bt
#0  configure_output_video_filter (fg=0x555557a9bd80, ofilter=0x555557a52a00, out=0x555557ac6800) at fftools/ffmpeg_filter.c:448
#1  0x0000555555653b5f in configure_output_filter (fg=0x555557a9bd80, ofilter=0x555557a52a00, out=0x555557ac6800) at fftools/ffmpeg_filter.c:677
#2  0x000055555565576b in configure_filtergraph (fg=0x555557a9bd80) at fftools/ffmpeg_filter.c:1098
#3  0x0000555555666881 in ifilter_send_frame (ifilter=0x555557ce4640, frame=0x555557d39680) at fftools/ffmpeg.c:2187
#4  0x0000555555666ba7 in send_frame_to_filters (ist=0x555557a50a40, decoded_frame=0x555557d39680) at fftools/ffmpeg.c:2268
#5  0x0000555555667a14 in decode_video (ist=0x555557a50a40, pkt=0x7fffffffd030, got_output=0x7fffffffd018, duration_pts=0x7fffffffd028, eof=0, decode_failed=0x7fffffffd020)
    at fftools/ffmpeg.c:2469
#6  0x0000555555668437 in process_input_packet (ist=0x555557a50a40, pkt=0x7fffffffd270, no_eof=0) at fftools/ffmpeg.c:2623
#7  0x000055555566fe28 in process_input (file_index=0) at fftools/ffmpeg.c:4505
#8  0x00005555556703e7 in transcode_step () at fftools/ffmpeg.c:4625
#9  0x0000555555670564 in transcode () at fftools/ffmpeg.c:4679
#10 0x0000555555670f34 in main (argc=13, argv=0x7fffffffdbd8) at fftools/ffmpeg.c:4886

ifilter_send_frame // need_reinit // why
(ifilter->hw_frames_ctx && ifilter->hw_frames_ctx->data != frame->hw_frames_ctx->data)

Number 1: 
(gdb) bt
#0  av_hwframe_ctx_alloc (device_ref_in=0x555557ab3200) at libavutil/hwcontext.c:244
#1  0x0000555555c19412 in avcodec_get_hw_frames_parameters (avctx=0x555557ab47c0, device_ref=0x555557ab3200, hw_pix_fmt=AV_PIX_FMT_VAAPI_VLD, out_frames_ref=0x555557ab4bb0)
    at libavcodec/decode.c:1223
#2  0x0000555555c192e5 in ff_decode_get_hw_frames_ctx (avctx=0x555557ab47c0, dev_type=AV_HWDEVICE_TYPE_VAAPI) at libavcodec/decode.c:1176
#3  0x00005555567773ea in ff_vaapi_decode_init (avctx=0x555557ab47c0) at libavcodec/vaapi_decode.c:659
#4  0x0000555555c195c3 in hwaccel_init (avctx=0x555557ab47c0, hw_config=0x5555571d85b0 <__compound_literal.0>) at libavcodec/decode.c:1273
#5  0x0000555555c19ac0 in ff_get_format (avctx=0x555557ab47c0, fmt=0x7fffebfb0c2c) at libavcodec/decode.c:1412
#6  0x0000555555f4df9a in ff_thread_get_format (avctx=0x555557ab47c0, fmt=0x7fffebfb0c2c) at libavcodec/pthread_frame.c:945
#7  0x0000555555d0fb1e in get_format (s=0x555557a4d880, sps=0x555557acb940) at libavcodec/hevcdec.c:421
#8  0x0000555555d10258 in hls_slice_header (s=0x555557a4d880) at libavcodec/hevcdec.c:529
#9  0x0000555555d1aedf in decode_nal_unit (s=0x555557a4d880, nal=0x7fffe4011218) at libavcodec/hevcdec.c:2915
#10 0x0000555555d1b5b6 in decode_nal_units (s=0x555557a4d880, buf=0x555557a84b10 "", length=22175) at libavcodec/hevcdec.c:3056
#11 0x0000555555d1bbcd in hevc_decode_frame (avctx=0x555557ab47c0, data=0x555557ab4c80, got_output=0x555557ab9ba0, avpkt=0x555557ab9b40) at libavcodec/hevcdec.c:3192
#12 0x0000555555f4ba23 in frame_worker_thread (arg=0x555557ab9a40) at libavcodec/pthread_frame.c:201
#13 0x00007ffff38616db in start_thread (arg=0x7fffebfb1700) at pthread_create.c:463
#14 0x00007ffff358a88f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

(gdb) bt
#0  av_hwframe_ctx_init (ref=0x7fffe401ac80) at libavutil/hwcontext.c:331
#1  0x0000555555c19335 in ff_decode_get_hw_frames_ctx (avctx=0x555557ab47c0, dev_type=AV_HWDEVICE_TYPE_VAAPI) at libavcodec/decode.c:1192
#2  0x00005555567773ea in ff_vaapi_decode_init (avctx=0x555557ab47c0) at libavcodec/vaapi_decode.c:659
#3  0x0000555555c195c3 in hwaccel_init (avctx=0x555557ab47c0, hw_config=0x5555571d85b0 <__compound_literal.0>) at libavcodec/decode.c:1273
#4  0x0000555555c19ac0 in ff_get_format (avctx=0x555557ab47c0, fmt=0x7fffebfb0c2c) at libavcodec/decode.c:1412
#5  0x0000555555f4df9a in ff_thread_get_format (avctx=0x555557ab47c0, fmt=0x7fffebfb0c2c) at libavcodec/pthread_frame.c:945
#6  0x0000555555d0fb1e in get_format (s=0x555557a4d880, sps=0x555557acb940) at libavcodec/hevcdec.c:421
#7  0x0000555555d10258 in hls_slice_header (s=0x555557a4d880) at libavcodec/hevcdec.c:529
#8  0x0000555555d1aedf in decode_nal_unit (s=0x555557a4d880, nal=0x7fffe4011218) at libavcodec/hevcdec.c:2915
#9  0x0000555555d1b5b6 in decode_nal_units (s=0x555557a4d880, buf=0x555557a84b10 "", length=22175) at libavcodec/hevcdec.c:3056
#10 0x0000555555d1bbcd in hevc_decode_frame (avctx=0x555557ab47c0, data=0x555557ab4c80, got_output=0x555557ab9ba0, avpkt=0x555557ab9b40) at libavcodec/hevcdec.c:3192
#11 0x0000555555f4ba23 in frame_worker_thread (arg=0x555557ab9a40) at libavcodec/pthread_frame.c:201
#12 0x00007ffff38616db in start_thread (arg=0x7fffebfb1700) at pthread_create.c:463
#13 0x00007ffff358a88f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

hls_slice_header

Number 2:
(gdb) bt
#0  av_hwframe_ctx_alloc (device_ref_in=0x555557ab3200) at libavutil/hwcontext.c:244
#1  0x0000555555c19412 in avcodec_get_hw_frames_parameters (avctx=0x555557adf600, device_ref=0x555557ab3200, hw_pix_fmt=AV_PIX_FMT_VAAPI_VLD, out_frames_ref=0x555557adf9f0)
    at libavcodec/decode.c:1223
#2  0x0000555555c192e5 in ff_decode_get_hw_frames_ctx (avctx=0x555557adf600, dev_type=AV_HWDEVICE_TYPE_VAAPI) at libavcodec/decode.c:1176
#3  0x00005555567773ea in ff_vaapi_decode_init (avctx=0x555557adf600) at libavcodec/vaapi_decode.c:659
#4  0x0000555555c195c3 in hwaccel_init (avctx=0x555557adf600, hw_config=0x5555571d85b0 <__compound_literal.0>) at libavcodec/decode.c:1273
#5  0x0000555555c19ac0 in ff_get_format (avctx=0x555557adf600, fmt=0x7fffeafaec2c) at libavcodec/decode.c:1412
#6  0x0000555555f4df9a in ff_thread_get_format (avctx=0x555557adf600, fmt=0x7fffeafaec2c) at libavcodec/pthread_frame.c:945
#7  0x0000555555d0fb1e in get_format (s=0x555557d08500, sps=0x7fffe0030e00) at libavcodec/hevcdec.c:421
#8  0x0000555555d10258 in hls_slice_header (s=0x555557d08500) at libavcodec/hevcdec.c:529
#9  0x0000555555d1aedf in decode_nal_unit (s=0x555557d08500, nal=0x7fffe001b758) at libavcodec/hevcdec.c:2915
#10 0x0000555555d1b5b6 in decode_nal_units (s=0x555557d08500, buf=0x555557a7e740 "", length=21657) at libavcodec/hevcdec.c:3056
#11 0x0000555555d1bbcd in hevc_decode_frame (avctx=0x555557adf600, data=0x555557ac92c0, got_output=0x555557ab9f00, avpkt=0x555557ab9ea0) at libavcodec/hevcdec.c:3192
#12 0x0000555555f4ba23 in frame_worker_thread (arg=0x555557ab9da0) at libavcodec/pthread_frame.c:201
#13 0x00007ffff38616db in start_thread (arg=0x7fffeafaf700) at pthread_create.c:463
#14 0x00007ffff358a88f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

(gdb) bt
#0  av_hwframe_ctx_init (ref=0x7fffe000fc80) at libavutil/hwcontext.c:331
#1  0x0000555555c19335 in ff_decode_get_hw_frames_ctx (avctx=0x555557adf600, dev_type=AV_HWDEVICE_TYPE_VAAPI) at libavcodec/decode.c:1192
#2  0x00005555567773ea in ff_vaapi_decode_init (avctx=0x555557adf600) at libavcodec/vaapi_decode.c:659
#3  0x0000555555c195c3 in hwaccel_init (avctx=0x555557adf600, hw_config=0x5555571d85b0 <__compound_literal.0>) at libavcodec/decode.c:1273
#4  0x0000555555c19ac0 in ff_get_format (avctx=0x555557adf600, fmt=0x7fffeafaec2c) at libavcodec/decode.c:1412
#5  0x0000555555f4df9a in ff_thread_get_format (avctx=0x555557adf600, fmt=0x7fffeafaec2c) at libavcodec/pthread_frame.c:945
#6  0x0000555555d0fb1e in get_format (s=0x555557d08500, sps=0x7fffe0030e00) at libavcodec/hevcdec.c:421
#7  0x0000555555d10258 in hls_slice_header (s=0x555557d08500) at libavcodec/hevcdec.c:529
#8  0x0000555555d1aedf in decode_nal_unit (s=0x555557d08500, nal=0x7fffe001b758) at libavcodec/hevcdec.c:2915
#9  0x0000555555d1b5b6 in decode_nal_units (s=0x555557d08500, buf=0x555557a7e740 "", length=21657) at libavcodec/hevcdec.c:3056
#10 0x0000555555d1bbcd in hevc_decode_frame (avctx=0x555557adf600, data=0x555557ac92c0, got_output=0x555557ab9f00, avpkt=0x555557ab9ea0) at libavcodec/hevcdec.c:3192
#11 0x0000555555f4ba23 in frame_worker_thread (arg=0x555557ab9da0) at libavcodec/pthread_frame.c:201
#12 0x00007ffff38616db in start_thread (arg=0x7fffeafaf700) at pthread_create.c:463
#13 0x00007ffff358a88f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95

./ffmpeg_g -threads 1 -thread_type slice+frame -hwaccel vaapi  -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi -i  ../../../Videos/Allegro_HEVC_Main_HT50_INTRA_07_192x200@60Hz_3.1.bin -f null /dev/null -loglevel 99 -report


cbs_h2645_assemble_fragment() // start code


codename=$(lsb_release -c | awk  '{print $2}')
sudo tee /etc/apt/sources.list.d/ddebs.list << EOF
deb http://ddebs.ubuntu.com/ ${codename}      main restricted universe multiverse
deb http://ddebs.ubuntu.com/ ${codename}-security main restricted universe multiverse
deb http://ddebs.ubuntu.com/ ${codename}-updates  main restricted universe multiverse
deb http://ddebs.ubuntu.com/ ${codename}-proposed main restricted universe multiverse
EOF

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ECDCAD72428D7C01
sudo apt-get update
sudo apt-get install linux-image-$(uname -r)-dbgsym


#0  write_packet (of=0x555557a38240, pkt=0x7fffffffcf60, ost=0x555557a91600, unqueue=0) at fftools/ffmpeg.c:717
#1  0x0000555555660da0 in output_packet (of=0x555557a38240, pkt=0x7fffffffcf60, ost=0x555557a91600, eof=0) at fftools/ffmpeg.c:886
#2  0x0000555555666552 in do_streamcopy (ist=0x555557a38300, ost=0x555557a91600, pkt=0x7fffffffd2c0) at fftools/ffmpeg.c:2080
#3  0x00005555556690c5 in process_input_packet (ist=0x555557a38300, pkt=0x7fffffffd2c0, no_eof=0) at fftools/ffmpeg.c:2746
#4  0x00005555556701df in process_input (file_index=0) at fftools/ffmpeg.c:4505
#5  0x000055555567079e in transcode_step () at fftools/ffmpeg.c:4625
#6  0x000055555567091b in transcode () at fftools/ffmpeg.c:4679
#7  0x00005555556712eb in main (argc=13, argv=0x7fffffffdc28) at fftools/ffmpeg.c:4886

https://www.freedesktop.org/wiki/Software/PulseAudio/HowToUseGitSendEmail/  // git send patch

./ffmpeg -i ../../../Videos/skyfall2-trailer.mp4 -c copy -listen 1  -movflags frag_keyframe+empty_moov -f mp4 http://192.168.100.209:8999

./ffmpeg -re -i ~/Downloads/ToS-4k-1920.mov -vcodec libx264 -g 50 -refs 1 -s 640x360 -b:v 1000k -acodec aac -b:a 64k -flush_packets 0 -f mpegts "srt://127.0.0.1:5555?mode=listener"
ffplay srt://127.0.0.1:5555


./ffmpeg_g -v 55 -y -threads 1 -hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi -i ~/video/test/bbb_1080_264.mp4 -an -c:v h264_vaapi -slices 2 -frames:v 1 test.264
./ffmpeg -i test.264 out.mjpeg

1. static void dump_sidedata(void *ctx, AVStream *st, const char *indent)
2. const char *av_frame_side_data_name(enum AVFrameSideDataType type)


1. ./ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi -i ../../../Videos/skyfall2-trailer.mp4 -f null /dev/null
   ./ffmpeg -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -i ../../../Videos/skyfall2-trailer.mp4 -f null /dev/null


(gdb) bt
DdiMedia_MediaFormatToOsFormat   // (gdb) p buf->format $48 = Media_Format_CPU
#0  DdiMedia_MapBufferInternal (ctx=0x555557a9a2a0, buf_id=0, pbuf=0x7fffffffca48, flag=3)
    at /home/barry/Sources/umd_dev/media-driver/media_driver/linux/common/ddi/media_libva.cpp:2818
#1  0x00007fffeb1337aa in DdiMedia_MapBuffer (ctx=0x555557a9a2a0, buf_id=0, pbuf=0x7fffffffca48)
    at /home/barry/Sources/umd_dev/media-driver/media_driver/linux/common/ddi/media_libva.cpp:2846
#2  0x00007fffeb1390ac in DdiMedia_GetImage (ctx=0x555557a9a2a0, surface=24, x=0, y=0, width=1920, height=1088, image=0)
    at /home/barry/Sources/umd_dev/media-driver/media_driver/linux/common/ddi/media_libva.cpp:4408
#3  0x0000555556a864ca in vaapi_map_frame (hwfc=0x7fffe0052100, dst=0x555557f01e00, src=0x555557bf4d00, flags=1) at libavutil/hwcontext_vaapi.c:784
#4  0x0000555556a8678e in vaapi_transfer_data_from (hwfc=0x7fffe0052100, dst=0x555557a9b900, src=0x555557bf4d00) at libavutil/hwcontext_vaapi.c:852
#5  0x0000555556a7feb5 in av_hwframe_transfer_data (dst=0x555557a9b900, src=0x555557bf4d00, flags=0) at libavutil/hwcontext.c:450
#6  0x0000555556a7fdcb in transfer_data_alloc (dst=0x555557a9b680, src=0x555557bf4d00, flags=0) at libavutil/hwcontext.c:425
#7  0x0000555556a7fe6a in av_hwframe_transfer_data (dst=0x555557a9b680, src=0x555557bf4d00, flags=0) at libavutil/hwcontext.c:445
#8  0x000055555565b82c in hwaccel_retrieve_data (avctx=0x555557a98380, input=0x555557bf4d00) at fftools/ffmpeg_hw.c:448
#9  0x000055555566c18f in decode_video (ist=0x555557a98dc0, pkt=0x7fffffffcec0, got_output=0x7fffffffcea8, duration_pts=0x7fffffffceb8, eof=0, decode_failed=0x7fffffffceb0)
    at fftools/ffmpeg.c:2430
#10 0x000055555566cf9d in process_input_packet (ist=0x555557a98dc0, pkt=0x7fffffffd100, no_eof=0) at fftools/ffmpeg.c:2625
#11 0x000055555567498e in process_input (file_index=0) at fftools/ffmpeg.c:4507
#12 0x0000555555674f4d in transcode_step () at fftools/ffmpeg.c:4627
#13 0x00005555556750ca in transcode () at fftools/ffmpeg.c:4681
#14 0x0000555555675a9a in main (argc=15, argv=0x7fffffffda68) at fftools/ffmpeg.c:4888

DdiMedia_CreateImage //   buf->format            = Media_Format_CPU;//DdiCodec_OsFormatToMediaFormat(vaimg->format.fourcc); //Media_Format_Buffer;
a9a07fc9 lead to the issue


在前10秒应显示底帧:

blend=all_expr='A*(if(gte(T,10),1,T/10))+B*(1-(if(gte(T,10),1,T/10)))'

显示1x1棋盘效应效果（有的显示A，有的显示B）:

blend=all_expr='if(eq(mod(X,2),mod(Y,2)),A,B)'

从左到右揭开的效果:

blend=all_expr='if(gte(N*SW+X,W),A,B)'

从上到下揭开效果:

blend=all_expr='if(gte(Y-N*SH,0),A,B)'

从右下向左上揭开效果：

blend=all_expr='if(gte(TSH40+Y,H)gte((T40*SW+X)*W/H,W),A,B)'

显示当前和前一帧之间的差异:

tblend=all_mode=difference128

使用举例：

ffmpeg -i out31.avi -i out32.avi -filter_complex "blend=all_expr='if(gte(T*SH*200+Y,H)*gte((T*200*SW+X)

BlendPlaneRow

uint8_t src0[]  = {0x01, 0x23, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE};
uint8_t src1[]  = {0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x23};
uint8_t alpha[] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};

(gdb) p /x $xmm6
$17 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x80, 0x80, 0x80, 0x80, 0x0 <repeats 12 times>}, v8_int16 = {0x8080, 0x8080, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0}, v4_int32 = {0x80808080, 0x0, 0x0, 0x0}, v2_int64 = {0x80808080, 0x0}, uint128 = 0x80808080}
(gdb) p /x $xmm5
$18 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x8000000000000000, 0x8000000000000000}, v16_int8 = {0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 
    0xff, 0x0, 0xff}, v8_int16 = {0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00}, v4_int32 = {0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00}, v2_int64 = {
    0xff00ff00ff00ff00, 0xff00ff00ff00ff00}, uint128 = 0xff00ff00ff00ff00ff00ff00ff00ff00}
(gdb) p /x $xmm6
$19 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x80, 0x80, 0x80, 0x80, 0x0 <repeats 12 times>}, v8_int16 = {0x8080, 0x8080, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0}, v4_int32 = {0x80808080, 0x0, 0x0, 0x0}, v2_int64 = {0x80808080, 0x0}, uint128 = 0x80808080}
(gdb) p /x $xmm7
$20 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 
    0x0}, v2_int64 = {0x0, 0x0}, uint128 = 0x0}



//
(gdb) p /x $xmm5
$21 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x8000000000000000, 0x8000000000000000}, v16_int8 = {0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 
    0xff, 0x0, 0xff}, v8_int16 = {0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00}, v4_int32 = {0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00}, v2_int64 = {
    0xff00ff00ff00ff00, 0xff00ff00ff00ff00}, uint128 = 0xff00ff00ff00ff00ff00ff00ff00ff00}
(gdb) p /x $xmm6
$22 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x80 <repeats 16 times>}, v8_int16 = {0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080}, 
  v4_int32 = {0x80808080, 0x80808080, 0x80808080, 0x80808080}, v2_int64 = {0x8080808080808080, 0x8080808080808080}, uint128 = 0x80808080808080808080808080808080}
(gdb) p /x $xmm7
$23 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80}, 
  v8_int16 = {0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f}, v4_int32 = {0x807f807f, 0x807f807f, 0x807f807f, 0x807f807f}, v2_int64 = {0x807f807f807f807f, 
    0x807f807f807f807f}, uint128 = 0x807f807f807f807f807f807f807f807f}


void ff_global_blend_row_ssse3(const uint8_t *src0,
                                      const uint8_t *src1,
                                      const uint8_t *alpha,
                                      uint8_t *dst,
                                      int width)
{
  __asm__ volatile(
      "pcmpeqb    %%xmm5,%%xmm5                  \n" xmm5 = {0xff, 0xff, oxff, oxff, 0xff, 0xff, oxff, oxff, 0xff, 0xff, oxff, oxff, 0xff, 0xff, oxff, oxff}
      "psllw      $0x8,%%xmm5                    \n" xmm5 = {0x00, 0xff, ox00, oxff, 0x00, 0xff, ox00, oxff, 0x00, 0xff, ox00, oxff, 0x00, 0xff, ox00, oxff} // xmm5 = xmm5 << 8
      "mov        $0x80808080,%%eax              \n" eax  = 0x80808080
      "movd       %%eax,%%xmm6                   \n" xmm6 = v16_int8 = {0x80, 0x80, 0x80, 0x80, 0x0 <repeats 12 times>},
      "pshufd     $0x0,%%xmm6,%%xmm6             \n" xmm6 = v16_int8 = {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80}
      "mov        $0x807f807f,%%eax              \n" eax  = 0x807f807f
      "movd       %%eax,%%xmm7                   \n" xmm7 = v16_int8 = {0x7f, 0x80, 0x7f, 0x80, 0x0 <repeats 12 times>}
      "pshufd     $0x0,%%xmm7,%%xmm7             \n" xmm7 = v16_int8 = {0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80}
      "sub        %2,%0                          \n" $0 = $0 - $2
      "sub        %2,%1                          \n" $1 = $1 - $2
      "sub        %2,%3                          \n" $3 = $3 - $2
(gdb) p /x $xmm5
$21 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x8000000000000000, 0x8000000000000000}, v16_int8 = {0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 0xff, 0x0, 
    0xff, 0x0, 0xff}, v8_int16 = {0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00}, v4_int32 = {0xff00ff00, 0xff00ff00, 0xff00ff00, 0xff00ff00}, v2_int64 = {
    0xff00ff00ff00ff00, 0xff00ff00ff00ff00}, uint128 = 0xff00ff00ff00ff00ff00ff00ff00ff00}
(gdb) p /x $xmm6
$22 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x80 <repeats 16 times>}, v8_int16 = {0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080}, 
  v4_int32 = {0x80808080, 0x80808080, 0x80808080, 0x80808080}, v2_int64 = {0x8080808080808080, 0x8080808080808080}, uint128 = 0x80808080808080808080808080808080}
(gdb) p /x $xmm7
$23 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80}, 
  v8_int16 = {0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f}, v4_int32 = {0x807f807f, 0x807f807f, 0x807f807f, 0x807f807f}, v2_int64 = {0x807f807f807f807f, 
    0x807f807f807f807f}, uint128 = 0x807f807f807f807f807f807f807f807f}

      // 8 pixel loop.
      "1:                                        \n"
      "movq       (%2),%%xmm0                    \n" // Fixme load $2 => xmm0
                                                     // xmm0 = v16_int8 = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0} // 8 Bytes
      "punpcklbw  %%xmm0,%%xmm0                  \n" // xmm0 = v16_int8 = {0x55 <repeats 16 times>} // 16 Bytes
      "pxor       %%xmm5,%%xmm0                  \n" // xmm0 = v16_int8 = {0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa},
                                                     //  0x55 + 0xaa = 0xff
(gdb) p /x $xmm0 
$29 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa}, 
  v8_int16 = {0xaa55, 0xaa55, 0xaa55, 0xaa55, 0xaa55, 0xaa55, 0xaa55, 0xaa55}, v4_int32 = {0xaa55aa55, 0xaa55aa55, 0xaa55aa55, 0xaa55aa55}, v2_int64 = {0xaa55aa55aa55aa55, 
    0xaa55aa55aa55aa55}, uint128 = 0xaa55aa55aa55aa55aa55aa55aa55aa55}

      "movq       (%0,%2,1),%%xmm1               \n" // xmm1 = v16_int8 = {0x1, 0x23, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
      "movq       (%1,%2,1),%%xmm2               \n" // xmm2 = v16_int8 = {0xf0, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
      "punpcklbw  %%xmm2,%%xmm1                  \n" // xmm1 = v16_int8 = {0x1, 0xf0, 0x23, 0xde, 0x34, 0xbc, 0x56, 0x9a, 0x78, 0x78, 0x9a, 0x56, 0xbc, 0x34, 0xde, 0x23},
                                                     // xmm1 = xmm1 + xmm2 unpackb

uint8_t src1[]  = {0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x23};      
(gdb) p /x $xmm2
$30 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0xf0, 0xde, 0xbc, 0x9a, 0x78, 0x56, 0x34, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v8_int16 = {
    0xdef0, 0x9abc, 0x5678, 0x2334, 0x0, 0x0, 0x0, 0x0}, v4_int32 = {0x9abcdef0, 0x23345678, 0x0, 0x0}, v2_int64 = {0x233456789abcdef0, 0x0}, uint128 = 0x233456789abcdef0}

uint8_t src0[]  = {0x01, 0x23, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE};
(gdb) p /x $xmm1 src0/src1 interlace [XXXX]
$31 = {v4_float = {0x0, 0x0, 0x3c000000, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x1, 0xf0, 0x23, 0xde, 0x34, 0xbc, 0x56, 0x9a, 0x78, 0x78, 0x9a, 0x56, 0xbc, 0x34, 0xde, 0x23}, 
  v8_int16 = {0xf001, 0xde23, 0xbc34, 0x9a56, 0x7878, 0x569a, 0x34bc, 0x23de}, v4_int32 = {0xde23f001, 0x9a56bc34, 0x569a7878, 0x23de34bc}, v2_int64 = {0x9a56bc34de23f001, 
    0x23de34bc569a7878}, uint128 = 0x23de34bc569a78789a56bc34de23f001}

      "psubb      %%xmm6,%%xmm1                  \n" // xmm1 - xmm6 => xmm1  0x01 - 0x80 = 0x01 + 0x80 if (a<b) a+b else a-b
                                                     // xmm1 = v16_int8 = {0x81, 0x70, 0xa3, 0x5e, 0xb4, 0x3c, 0xd6, 0x1a, 0xf8, 0xf8, 0x1a, 0xd6, 0x3c, 0xb4, 0x5e, 0xa3},
						     // xmm0 = v16_int8 = {0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa},
(gdb) p /x $xmm1
$32 = {v4_float = {0x0, 0x0, 0xc2000000, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x81, 0x70, 0xa3, 0x5e, 0xb4, 0x3c, 0xd6, 0x1a, 0xf8, 0xf8, 0x1a, 0xd6, 0x3c, 0xb4, 0x5e, 0xa3}, 
  v8_int16 = {0x7081, 0x5ea3, 0x3cb4, 0x1ad6, 0xf8f8, 0xd61a, 0xb43c, 0xa35e}, v4_int32 = {0x5ea37081, 0x1ad63cb4, 0xd61af8f8, 0xa35eb43c}, v2_int64 = {0x1ad63cb45ea37081, 
    0xa35eb43cd61af8f8}, uint128 = 0xa35eb43cd61af8f81ad63cb45ea37081}
(gdb) p /x $xmm6
$33 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x80 <repeats 16 times>}, v8_int16 = {0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080, 0x8080}, 
  v4_int32 = {0x80808080, 0x80808080, 0x80808080, 0x80808080}, v2_int64 = {0x8080808080808080, 0x8080808080808080}, uint128 = 0x80808080808080808080808080808080}
  
      "pmaddubsw  %%xmm1,%%xmm0                  \n" // 按照字节对应位置做乘法，在把相邻两数相加，饱和在16位有符号数。 DST = xmm0 SRC = xmm1
                                                     // xmm1 = v16_int8 = {0x81, 0x70, 0xa3, 0x5e, 0xb4, 0x3c, 0xd6, 0x1a, 0xf8, 0xf8, 0x1a, 0xd6, 0x3c, 0xb4, 0x5e, 0xa3},
						     // xmm0 = v16_int8 = {0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa},
						     // after
						     // xmm0 = v16_int8 = {0x35, 0x20, 0x8b, 0x1f, 0x9c, 0xe, 0x52, 0x3, 0x8, 0xf8, 0xbe, 0xec, 0x74, 0xe1, 0x74, 0xe1}
						             = v8_int16 = {0x2035, 0x1f8b, 0xe9c, 0x352, 0xf808, 0xecbe, 0xe174, 0xe174}
                                                     // DEST[15:0] ←SaturateToSignedWord(SRC[15:8]*DST[15:8]   + SRC[7:0]*DST[7:0]);
　　                                                  // DEST[31:16]←SaturateToSignedWord(SRC[31:24]*DST[31:24] + SRC[23:16]*DST[23:16]);
　　                                                  // DEST[47:32]←SaturateToSignedWord(SRC[47:40]*DST[47:40] + SRC[39:32]*DST[39:32]);
　　                                                  // DEST[63:48]←SaturateToSignedWord(SRC[63:56]*DST[63:56] + SRC[55:48]*DST[55:48]);
						     // xmm0 = (xmm0 * xmm1 + xmm1)
						     // Byte0 =  0x70 * 0xaa + 0x81 * 0x55 = 0x7535  //0x75 - 0x20 = 0x55
						     //          0x5e * 0xaa + 0xa3 * 0x55 = 0x748b  //0x74 - 0x1f = 0x55
						     //          0x3c * 0xaa + 0xb4 * 0x55 = 0x639c  //0x63 - 0xe  = 0x55
						     //          0x1a * 0xaa + 0xd6 * 0x55 = 0x5852  //0x58 - 0x3  = 0x55
						     //          0xf8 * 0xaa + 0xf8 * 0x55 = 0xf708  // 0xf7 + 1        = 0xf8
						     //          0xd6 * 0xaa + 0x1a * 0x55 = 0x98be  // 0x98 + 0x55 - 1 = 0xec
						     //          0xb4 * 0xaa + 0x3c * 0x55 = 0x8b74  // 0x8b + 0x55 + 1 = 0xe1
						     //          0xa3 * 0xaa + 0x5e * 0x55 = 0x8b74  // 0x8b + 0x55 + 1 = 0xe1
(gdb) p /x $xmm1
$34 = {v4_float = {0x0, 0x0, 0xc2000000, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x81, 0x70, 0xa3, 0x5e, 0xb4, 0x3c, 0xd6, 0x1a, 0xf8, 0xf8, 0x1a, 0xd6, 0x3c, 0xb4, 0x5e, 0xa3}, 
  v8_int16 = {0x7081, 0x5ea3, 0x3cb4, 0x1ad6, 0xf8f8, 0xd61a, 0xb43c, 0xa35e}, v4_int32 = {0x5ea37081, 0x1ad63cb4, 0xd61af8f8, 0xa35eb43c}, v2_int64 = {0x1ad63cb45ea37081, 
    0xa35eb43cd61af8f8}, uint128 = 0xa35eb43cd61af8f81ad63cb45ea37081}
(gdb) p /x $xmm0
$35 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x8000000000000000}, v16_int8 = {0x35, 0x20, 0x8b, 0x1f, 0x9c, 0xe, 0x52, 0x3, 0x8, 0xf8, 0xbe, 0xec, 0x74, 0xe1, 0x74, 
    0xe1}, v8_int16 = {0x2035, 0x1f8b, 0xe9c, 0x352, 0xf808, 0xecbe, 0xe174, 0xe174}, v4_int32 = {0x1f8b2035, 0x3520e9c, 0xecbef808, 0xe174e174}, v2_int64 = {0x3520e9c1f8b2035, 
    0xe174e174ecbef808}, uint128 = 0xe174e174ecbef80803520e9c1f8b2035}
    
      "paddw      %%xmm7,%%xmm0                  \n"  // PADDW instruction with 128-bit operands:
                                                      // DEST[15-0] DEST[15-0] + SRC[15-0];
                                                      // * repeat add operation for 2nd through 7th word *;
                                                      // DEST[127-112] DEST[127-112] + SRC[127-112];
						      // xmm0 = v16_int8 = {0x35, 0x20, 0x8b, 0x1f, 0x9c, 0xe, 0x52, 0x3, 0x8, 0xf8, 0xbe, 0xec, 0x74, 0xe1, 0x74, 0xe1}
						             = v8_int16 = {0x2035, 0x1f8b, 0xe9c,  0x352,  0xf808, 0xecbe, 0xe174, 0xe174}
						      // xmm7= v8_int16 = {0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f},
						      // xmm0= v8_int16 = {0xa0b4, 0xa00a, 0x8f1b, 0x83d1, 0x7887, 0x6d3d, 0x61f3, 0x61f3}
						      //  xmm0 word0 = 0x2035 + 0x807f = 0xa0b4
						      //       word1 = 0x1f8b + 0x807f = 0xa00a
						      //       word2 = 0xe9c  + 0x807f = 0x8f1b
						      //       ...
						      //       word7 = 0xe174 + 0x807f = 0x161fc = 0x61fc
(gdb) p /x $xmm7                      
$36 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80}, 
  v8_int16 = {0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f, 0x807f}, v4_int32 = {0x807f807f, 0x807f807f, 0x807f807f, 0x807f807f}, v2_int64 = {0x807f807f807f807f, 
    0x807f807f807f807f}, uint128 = 0x807f807f807f807f807f807f807f807f}
(gdb) p /x $xmm0
$37 = {v4_float = {0x0, 0x0, 0xffffffff, 0xffffffff}, v2_double = {0x0, 0x7fffffffffffffff}, v16_int8 = {0xb4, 0xa0, 0xa, 0xa0, 0x1b, 0x8f, 0xd1, 0x83, 0x87, 0x78, 0x3d, 0x6d, 0xf3, 
    0x61, 0xf3, 0x61}, v8_int16 = {0xa0b4, 0xa00a, 0x8f1b, 0x83d1, 0x7887, 0x6d3d, 0x61f3, 0x61f3}, v4_int32 = {0xa00aa0b4, 0x83d18f1b, 0x6d3d7887, 0x61f361f3}, v2_int64 = {
    0x83d18f1ba00aa0b4, 0x61f361f36d3d7887}, uint128 = 0x61f361f36d3d788783d18f1ba00aa0b4}

      "psrlw      $0x8,%%xmm0                    \n" xmm0 = xmm0 << 8
                                                       // xmm0 = v16_int8 = {0xa0, 0x0, 0xa0, 0x0, 0x8f, 0x0, 0x83, 0x0, 0x78, 0x0, 0x6d, 0x0, 0x61, 0x0, 0x61, 0x0}
(gdb) p /x $xmm0
$38 = {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, v16_int8 = {0xa0, 0x0, 0xa0, 0x0, 0x8f, 0x0, 0x83, 0x0, 0x78, 0x0, 0x6d, 0x0, 0x61, 0x0, 0x61, 0x0}, v8_int16 = {
    0xa0, 0xa0, 0x8f, 0x83, 0x78, 0x6d, 0x61, 0x61}, v4_int32 = {0xa000a0, 0x83008f, 0x6d0078, 0x610061}, v2_int64 = {0x83008f00a000a0, 0x610061006d0078}, 
  uint128 = 0x610061006d00780083008f00a000a0}

      "packuswb   %%xmm0,%%xmm0                  \n"  // xmm0 = v16_int8 = {0xa0, 0xa0, 0x8f, 0x83, 0x78, 0x6d, 0x61, 0x61, 0xa0, 0xa0, 0x8f, 0x83, 0x78, 0x6d, 0x61, 0x61},
                                                                v8_int16 = {0xa0a0, 0x838f, 0x6d78, 0x6161, 0xa0a0, 0x838f, 0x6d78, 0x6161}
(gdb) p /x $xmm0
$40 = {v4_float = {0x0, 0xffffffff, 0x0, 0xffffffff}, v2_double = {0x7fffffffffffffff, 0x7fffffffffffffff}, v16_int8 = {0xa0, 0xa0, 0x8f, 0x83, 0x78, 0x6d, 0x61, 0x61, 0xa0, 0xa0, 
    0x8f, 0x83, 0x78, 0x6d, 0x61, 0x61}, v8_int16 = {0xa0a0, 0x838f, 0x6d78, 0x6161, 0xa0a0, 0x838f, 0x6d78, 0x6161}, v4_int32 = {0x838fa0a0, 0x61616d78, 0x838fa0a0, 0x61616d78}, 
  v2_int64 = {0x61616d78838fa0a0, 0x61616d78838fa0a0}, uint128 = 0x61616d78838fa0a061616d78838fa0a0}

      "movq       %%xmm0,(%3,%2,1)               \n"

(gdb) p /x dst
$47 = {0xa0, 0xa0, 0x8f, 0x83, 0x78, 0x6d, 0x61, 0x61}

      "lea        0x8(%2),%2                     \n" // Fixme
      "sub        $0x8,%4                        \n"
      "jg        1b                              \n"
      : "+r"(src0),   // %0
        "+r"(src1),   // %1
        "+r"(alpha),  // %2
        "+r"(dst),    // %3
        "+rm"(width)  // %4
        ::"memory",
        "cc", "eax", "xmm0", "xmm1", "xmm2", "xmm5", "xmm6", "xmm7");
}


// global blend 32 pixels at a time. width = n * 32 (n >=1)
// dst[i] = ((src0[i]*alpah[0])+(src1[i]*(255-alpha[0]))+255)/256
static void ff_global_blend_row_avx2(const uint8_t *src0,
                                     const uint8_t *src1,
                                     const uint8_t *alpha,
                                     uint8_t *dst,
                                     int width)
{
  __asm__ volatile(
      "vpcmpeqb   %%ymm5,%%ymm5,%%ymm5           \n"
      "vpsllw     $0x8,%%ymm5,%%ymm5             \n"
      "mov        $0x80808080,%%eax              \n" 
      "vmovd      %%eax,%%xmm6                   \n" xmm6 = 
      "vbroadcastss %%xmm6,%%ymm6                \n" xmm6 = v32_int8 = {0x80 <repeats 32 times>}
      "mov        $0x807f807f,%%eax              \n"
      "vmovd      %%eax,%%xmm7                   \n"
      "vbroadcastss %%xmm7,%%ymm7                \n"
      //"sub        %2,%0                          \n"
      //"sub        %2,%1                          \n"
      //"sub        %2,%3                          \n"

      // 32 pixel per loop.
      "1:                                        \n"
      "vmovdqu    (%2),%%ymm0                    \n" // Move unaligned packed integer values from ymm2/m256 to ymm1.
                                                     // v32_int8 = {0x55 <repeats 32 times>}, v16_int16 = {0x5555 <repeats 16 times>} load 32 byte
      "vpunpckhbw %%ymm0,%%ymm0,%%ymm3           \n"
      "vpunpcklbw %%ymm0,%%ymm0,%%ymm0           \n"
      "vpxor      %%ymm5,%%ymm3,%%ymm3           \n"
      "vpxor      %%ymm5,%%ymm0,%%ymm0           \n"

      "vmovdqu    (%0),%%ymm1                    \n"
      "vmovdqu    (%1),%%ymm2                    \n"
      "vpunpckhbw %%ymm2,%%ymm1,%%ymm4           \n"
      "vpunpcklbw %%ymm2,%%ymm1,%%ymm1           \n"
      "vpsubb     %%ymm6,%%ymm4,%%ymm4           \n"
      "vpsubb     %%ymm6,%%ymm1,%%ymm1           \n"
      "vpmaddubsw %%ymm4,%%ymm3,%%ymm3           \n"
      "vpmaddubsw %%ymm1,%%ymm0,%%ymm0           \n"
      "vpaddw     %%ymm7,%%ymm3,%%ymm3           \n"
      "vpaddw     %%ymm7,%%ymm0,%%ymm0           \n"
      "vpsrlw     $0x8,%%ymm3,%%ymm3             \n"
      "vpsrlw     $0x8,%%ymm0,%%ymm0             \n"
      "vpackuswb  %%ymm3,%%ymm0,%%ymm0           \n"

      "vmovdqu    %%ymm0,(%3)                    \n"
      "lea        0x20(%0),%0                    \n"
      "lea        0x20(%1),%1                    \n"
      "lea        0x20(%3),%3                    \n"
      "sub        $0x20,%4                       \n"
      "jg        1b                              \n"
      "vzeroupper                                \n"
      : "+r"(src0),   // %0
        "+r"(src1),   // %1
        "+r"(alpha),  // %2
        "+r"(dst),    // %3
        "+rm"(width)  // %4
        ::"memory",
        "cc", "eax", "xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm5", "xmm6",
         "xmm7", "xmm8");
}

int  ff_pixelutils_sad16_NxM_mmxext( uint16_t *src1, intptr_t, uint16_t *src2, intptr_t )

0000000000000c60 <ff_pixelutils_sad16_16x16_mmxext>:
     c60:       0f ef c0                pxor   %mm0,%mm0
     c63:       41 b8 10 00 00 00       mov    $0x10,%r8d
     
     c69:       0f 6f 0f                movq   (%rdi),%mm1
     c6c:       0f 6f 57 08             movq   0x8(%rdi),%mm2
     c70:       0f 6f 5f 10             movq   0x10(%rdi),%mm3
     c74:       0f 6f 67 18             movq   0x18(%rdi),%mm4
     c78:       0f f9 0a                psubw  (%rdx),%mm1
     c7b:       0f f9 52 08             psubw  0x8(%rdx),%mm2
     c7f:       0f f9 5a 10             psubw  0x10(%rdx),%mm3
     c83:       0f f9 62 18             psubw  0x18(%rdx),%mm4
     c87:       0f ef ed                pxor   %mm5,%mm5
     c8a:       0f ef f6                pxor   %mm6,%mm6
     c8d:       0f f9 e9                psubw  %mm1,%mm5
     c90:       0f f9 f2                psubw  %mm2,%mm6
     c93:       0f ee cd                pmaxsw %mm5,%mm1
     c96:       0f ee d6                pmaxsw %mm6,%mm2
     c99:       0f ef ff                pxor   %mm7,%mm7
     c9c:       0f ef ed                pxor   %mm5,%mm5
     c9f:       0f f9 fb                psubw  %mm3,%mm7
     ca2:       0f f9 ec                psubw  %mm4,%mm5
     ca5:       0f ee df                pmaxsw %mm7,%mm3
     ca8:       0f ee e5                pmaxsw %mm5,%mm4
     cab:       48 8d 3c 77             lea    (%rdi,%rsi,2),%rdi
     caf:       48 8d 14 4a             lea    (%rdx,%rcx,2),%rdx
     cb3:       0f fd ca                paddw  %mm2,%mm1
     cb6:       0f fd dc                paddw  %mm4,%mm3
     cb9:       0f fd c1                paddw  %mm1,%mm0
     cbc:       0f fd c3                paddw  %mm3,%mm0
     cbf:       41 ff c8                dec    %r8d
     cc2:       7f a5                   jg     c69 <ff_pixelutils_sad16_16x16_mmxext+0x9>
     cc4:       0f 6f c8                movq   %mm0,%mm1
     cc7:       0f 72 d1 10             psrld  $0x10,%mm1
     ccb:       0f 72 f0 10             pslld  $0x10,%mm0
     ccf:       0f 72 d0 10             psrld  $0x10,%mm0
     cd3:       0f fe c1                paddd  %mm1,%mm0
     cd6:       0f 70 c8 0e             pshufw $0xe,%mm0,%mm1
     cda:       0f fe c1                paddd  %mm1,%mm0
     cdd:       0f 7e c0                movd   %mm0,%eax


barry@barry-HP-ENVY-Notebook:~/Videos$ md5sum SMM0005.rcv 
39eb225dbfafacea3e3737deba789530  SMM0005.rcv
barry@barry-HP-ENVY-Notebook:~/Videos$ md5sum SMM0015.rcv 
78e45e50079e143e69f69d677c37ac3b  SMM0015.rcv


av_image_fill_pointers

BSF debug encoder:

LIBVA_DRIVER_NAME=iHD gdb --args ./ffmpeg_g -y -hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format vaapi -i ~/Videos/skyfall2-trailer.mp4 -an -c:v h264_vaapi -frames:v 1 -slices 100 -low_power 1 -bsf:v trace_headers -f null -


sudo env LD_LIBRARY_PATH=xxxx perf stat -d ./ffmpeg xxxx

 ./configure --enable-libx264 --enable-libx265 --enable-gpl --enable-libwebp --disable-optimizations --samples=../fate-suite --enable-openssl --enable-nonfree --enable-libzmq --enable-libkvazaar --enable-libvpx --enable-libvorbis --enable-libsrt --enable-libmfx


027f032bbce9bdf7bbec40665b98590cade33416 // make fate-copy-trac3074

// Samples
{channelId = 0, activeChannelCount = 1, useRoundRobinThreadAssignment = 0 '\000', intraPeriodLength = -2, intraRefreshType = 1, predStructure = 2 '\002', 
  baseLayerSwitchMode = 0, encMode = 9 '\t', hierarchicalLevels = 3, sourceWidth = 1920, sourceHeight = 1080, latencyMode = 0 '\000', interlacedVideo = 0 '\000', qp = 32, 
  useQpFile = 0 '\000', disableDlfFlag = 0 '\000', enableSaoFlag = 1 '\001', useDefaultMeHme = 1 '\001', enableHmeFlag = 1 '\001', enableHmeLevel0Flag = 1 '\001', 
  enableHmeLevel1Flag = 0 '\000', enableHmeLevel2Flag = 0 '\000', searchAreaWidth = 16, searchAreaHeight = 7, numberHmeSearchRegionInWidth = 2, numberHmeSearchRegionInHeight = 2, 
  hmeLevel0TotalSearchAreaWidth = 64, hmeLevel0TotalSearchAreaHeight = 25, hmeLevel0SearchAreaInWidthArray = {32, 32}, hmeLevel0SearchAreaInHeightArray = {12, 13}, 
  hmeLevel1SearchAreaInWidthArray = {1, 1}, hmeLevel1SearchAreaInHeightArray = {1, 1}, hmeLevel2SearchAreaInWidthArray = {1, 1}, hmeLevel2SearchAreaInHeightArray = {1, 1}, 
  constrainedIntra = 0 '\000', frameRate = 60, frameRateNumerator = 0, frameRateDenominator = 0, encoderBitDepth = 8, compressedTenBitFormat = 0, rateControlMode = 0, 
  sceneChangeDetection = 1, lookAheadDistance = 17, framesToBeEncoded = 0, targetBitRate = 7000000, maxQpAllowed = 48, minQpAllowed = 10, tune = 0 '\000', 
  bitRateReduction = 1 '\001', improveSharpness = 1 '\001', videoUsabilityInfo = 0, highDynamicRangeInput = 0, accessUnitDelimiter = 0, bufferingPeriodSEI = 0, pictureTimingSEI = 0, 
  registeredUserDataSeiFlag = 0, unregisteredUserDataSeiFlag = 0, recoveryPointSeiFlag = 0, enableTemporalId = 1, profile = 2, tier = 0, level = 0, 
  inputOutputBufferFifoInitCount = 50, injectorFrameRate = 3932160, speedControlFlag = 0, asmType = ASM_AVX2, codeVpsSpsPps = 0 '\000'}


// FFmpeg SVT-HEVC
{channelId = 0, activeChannelCount = 1, useRoundRobinThreadAssignment = 0 '\000', intraPeriodLength = -2, intraRefreshType = 1, predStructure = 2 '\002', 
  baseLayerSwitchMode = 0, encMode = 9 '\t', hierarchicalLevels = 3, sourceWidth = 0, sourceHeight = 0, latencyMode = 0 '\000', interlacedVideo = 0 '\000', qp = 32, 
  useQpFile = 0 '\000', disableDlfFlag = 0 '\000', enableSaoFlag = 1 '\001', useDefaultMeHme = 1 '\001', enableHmeFlag = 1 '\001', enableHmeLevel0Flag = 1 '\001', 
  enableHmeLevel1Flag = 0 '\000', enableHmeLevel2Flag = 0 '\000', searchAreaWidth = 16, searchAreaHeight = 7, numberHmeSearchRegionInWidth = 2, numberHmeSearchRegionInHeight = 2, 
  hmeLevel0TotalSearchAreaWidth = 64, hmeLevel0TotalSearchAreaHeight = 25, hmeLevel0SearchAreaInWidthArray = {32, 32}, hmeLevel0SearchAreaInHeightArray = {12, 13}, 
  hmeLevel1SearchAreaInWidthArray = {1, 1}, hmeLevel1SearchAreaInHeightArray = {1, 1}, hmeLevel2SearchAreaInWidthArray = {1, 1}, hmeLevel2SearchAreaInHeightArray = {1, 1}, 
  constrainedIntra = 0 '\000', frameRate = 60, frameRateNumerator = 0, frameRateDenominator = 0, encoderBitDepth = 8, compressedTenBitFormat = 0, rateControlMode = 0, 
  sceneChangeDetection = 1, lookAheadDistance = 17, framesToBeEncoded = 0, targetBitRate = 7000000, maxQpAllowed = 48, minQpAllowed = 10, tune = 0 '\000', 
  bitRateReduction = 1 '\001', improveSharpness = 1 '\001', videoUsabilityInfo = 0, highDynamicRangeInput = 0, accessUnitDelimiter = 0, bufferingPeriodSEI = 0, pictureTimingSEI = 0, 
  registeredUserDataSeiFlag = 0, unregisteredUserDataSeiFlag = 0, recoveryPointSeiFlag = 0, enableTemporalId = 1, profile = 2, tier = 0, level = 0, 
  inputOutputBufferFifoInitCount = 50, injectorFrameRate = 3932160, speedControlFlag = 0, asmType = ASM_AVX2, codeVpsSpsPps = 1 '\001'}


// ./ffprobe ~/Videos/IMG_4596.MOV -of compact -show_streams -of json

.\xavs2.exe --InputFile=E:/Seq/aspen_1920x1080_30.yuv --FrameRate=4 --SourceWidth=1920 --SourceHeight=1080 --RateControl=0  --QP=27 --IntraPeriodMax=30 --IntraPeriodMin=30 --NumberBFrames=7 --OutputFile=test.avs --ReconFile=. --frames=570 --thread_frames=1 --thread_rows=1 --OpenGOP=0 --preset=3


./xavs2 --InputFile=/home/barry/Videos/aspen_1920x1080_30.yuv --FrameRate=4 --SourceWidth=1920 --SourceHeight=1080 --RateControl=0 --QP=27 --IntraPeriodMax=30 --IntraPeriodMin=30 --NumberBFrames=7 --OutputFile=test.avs --ReconFile=. --frames=570 --thread_frames=1 --thread_rows=1 --OpenGOP=0 --preset=3
// perf record -ag ./xavs2 --InputFile=/home/barry/Videos/aspen_1920x1080_30.yuv --FrameRate=4 --SourceWidth=1920 --SourceHeight=1080 --RateControl=0 --QP=27 --IntraPeriodMax=30 --IntraPeriodMin=30 --NumberBFrames=7 --OutputFile=test.avs --ReconFile=. --frames=570 --thread_frames=1 --thread_rows=1 --OpenGOP=0 --preset=3 --Loglevel=-1
// perf report
  17.31%  xavs2    xavs2               [.] write_luma_block_coeff_fastrdo           
  16.61%  xavs2    xavs2               [.] rdoq_cg                                 
   7.84%  xavs2    xavs2               [.] xavs2_calc_satd_16x8_avx2               
   3.90%  xavs2    xavs2               [.] est_rate_run                            
   3.78%  xavs2    xavs2               [.] aec_write_run_level_luma                
   2.60%  xavs2    xavs2               [.] xavs2_idct_c_32x32_avx2                 
   2.36%  xavs2    xavs2               [.] write_chroma_block_coeff_fastrdo        
   1.87%  xavs2    xavs2               [.] xavs2_dct_c_32x32_half_avx2             
   1.43%  xavs2    xavs2               [.] xavs2_compress_ctu_inter                
   1.23%  xavs2    xavs2               [.] xavs2_intpl_luma_ext_avx2               
   1.22%  xavs2    xavs2               [.] xavs2_dct_c_16x16_avx2                  
   1.19%  xavs2    xavs2               [.] sao_get_stat_block_EO_90                
   1.16%  xavs2    xavs2               [.] xavs2_quant_c_avx2                      
   1.09%  xavs2    xavs2               [.] xavs2_me_search                         
   1.04%  xavs2    xavs2               [.] xavs2_pixel_satd_16x8_internal_avx2     
   1.01%  xavs2    xavs2               [.] cu_rdcost_inter                         
   0.97%  xavs2    xavs2               [.] sao_get_stat_block_EO_0                 
   0.81%  xavs2    xavs2               [.] xavs2_rdoq_block                        
   0.75%  xavs2    xavs2               [.] xavs2_dct_32x32_avx2                    
   0.71%  xavs2    xavs2               [.] cu_recon_chroma                         
   0.66%  xavs2    xavs2               [.] biari_encode_symbol_aec                 
   0.65%  xavs2    xavs2               [.] xavs2_idct_c_16x16_avx2                 
   0.58%  xavs2    xavs2               [.] wavelet_64x64_avx2                      
   0.58%  xavs2    xavs2               [.] xavs2_rdo_get_pred_intra_luma_rmd       
   0.57%  xavs2    xavs2               [.] lf_edge_core                            
   0.55%  xavs2    xavs2               [.] xavs2_pixel_sa8d_8x8_internal_avx       
   0.54%  xavs2    xavs2               [.] xavs2_me_search_sym                     
   0.53%  xavs2    xavs2               [.] xavs2_dequant_avx2                      
   0.50%  xavs2    xavs2               [.] xavs2_pixel_satd_8x8_internal_avx2


// perf stat -d -r 10 ./xavs2 --InputFile=/home/barry/Videos/aspen_1920x1080_30.yuv --FrameRate=4 --SourceWidth=1920 --SourceHeight=1080 --RateControl=0 --QP=27 --IntraPeriodMax=30 --IntraPeriodMin=30 --NumberBFrames=7 --OutputFile=test.avs --ReconFile=. --frames=570 --thread_frames=1 --thread_rows=1 --OpenGOP=0 --preset=3 --Loglevel=-1

     122478.917294      task-clock (msec)         #    1.059 CPUs utilized            ( +-  0.09% )
            11,684      context-switches          #    0.095 K/sec                    ( +-  0.41% )
                21      cpu-migrations            #    0.000 K/sec                    ( +- 15.55% )
           102,422      page-faults               #    0.836 K/sec                    ( +-  0.00% )
   458,898,322,463      cycles                    #    3.747 GHz                      ( +-  0.09% )  (49.97%)
   833,606,196,617      instructions              #    1.82  insn per cycle           ( +-  0.02% )  (62.48%)
    82,257,141,576      branches                  #  671.602 M/sec                    ( +-  0.02% )  (62.50%)
     4,895,764,269      branch-misses             #    5.95% of all branches          ( +-  0.04% )  (62.52%)
   197,987,852,893      L1-dcache-loads           # 1616.506 M/sec                    ( +-  0.02% )  (62.53%)
    11,395,456,244      L1-dcache-load-misses     #    5.76% of all L1-dcache hits    ( +-  0.33% )  (62.51%)
     2,621,987,381      LLC-loads                 #   21.408 M/sec                    ( +-  0.45% )  (49.99%)
       174,183,085      LLC-load-misses           #    6.64% of all LL-cache hits     ( +-  0.23% )  (49.98%)

          115.613098816 seconds time elapsed                                          ( +-  0.09% )


// perf stat -d -r 10 ./xavs2 --InputFile=/home/barry/Videos/aspen_1920x1080_30.yuv --FrameRate=4 --SourceWidth=1920 --SourceHeight=1080 --RateControl=0 --QP=27 --IntraPeriodMax=30 --IntraPeriodMin=30 --NumberBFrames=7 --OutputFile=test.avs --ReconFile=. --frames=570 --thread_frames=1 --thread_rows=1 --OpenGOP=0 --preset=3 --Loglevel=-1 --RdoqLevel=0

// valgrind --tool=callgrind ./xavs2 --InputFile=/home/barry/Videos/aspen_1920x1080_30.yuv --FrameRate=4 --SourceWidth=1920 --SourceHeight=1080 --RateControl=0 --QP=27 --IntraPeriodMax=30 --IntraPeriodMin=30 --NumberBFrames=7 --OutputFile=test.avs --ReconFile=. --frames=570 --thread_frames=1 --thread_rows=1 --OpenGOP=0 --preset=3 --Loglevel=-1 --RdoqLevel=0

// kcachegrind profile.callgrind

      92609.620748      task-clock (msec)         #    1.074 CPUs utilized            ( +-  0.15% )
            14,021      context-switches          #    0.151 K/sec                    ( +- 11.63% )
                64      cpu-migrations            #    0.001 K/sec                    ( +- 29.89% )
           102,350      page-faults               #    0.001 M/sec                    ( +-  0.00% )
   347,818,029,701      cycles                    #    3.756 GHz                      ( +-  0.06% )  (49.97%)
   626,401,796,483      instructions              #    1.80  insn per cycle           ( +-  0.03% )  (62.50%)
    50,944,195,061      branches                  #  550.096 M/sec                    ( +-  0.05% )  (62.52%)
     2,944,771,570      branch-misses             #    5.78% of all branches          ( +-  0.05% )  (62.53%)
   145,826,497,338      L1-dcache-loads           # 1574.637 M/sec                    ( +-  0.04% )  (62.51%)
    10,980,243,581      L1-dcache-load-misses     #    7.53% of all L1-dcache hits    ( +-  0.17% )  (62.52%)
     2,517,309,418      LLC-loads                 #   27.182 M/sec                    ( +-  0.44% )  (49.96%)
       175,869,003      LLC-load-misses           #    6.99% of all LL-cache hits     ( +-  0.40% )  (49.99%)

      86.260069207 seconds time elapsed                                          ( +-  0.17% )

http://mile-high.video/files/mhv2018/ // PDF

echo -1 > /proc/sys/kernel/perf_event_paranoid
echo 0 > /proc/sys/kernel/kptr_restrict
echo 0 > /proc/sys/kernel/yama/ptrace_scope // threading trace

RLE:

1. 假设这是一个4*4块的QDCT，现在进行zigzag scan后就形成了：

       10  9  0  3  0  1  0  8  2 -1 -3  0 -5  0  0  0

现在进行Run Level编码后得到：

 Level:10  9  3  1  8  2 -1 -3 -5  0  0  0  0  0  0  0

 Run:   0  0  1  1  1  0  0  0  1  0  0  0  0  0  0  0


2. Run Level 编码实际上就是游程编码。若经zigzag扫描后数据串排列为：

       12, 0, 0,-6, 4, 6, 0, 0, 0, 0,-7, 0, 0, 0,-2, 0（4x4的块），经编码后为：
                                                     ^
						     |
						   run = 1

Run   :12 -6  4  6 -7 -2  0  0  0  0  0  0  0  0  0  0

Level:  0  2  0  0  4  3  0  0  0  0  0  0  0  0  0  0
                          ^
			  |
			p_runlevel


num_runlevel_pair = 6

using xavs2 lib: version 1.3.206 3492f8c1249486d4 8-bit success

 Performance counter stats for './xavs2 --InputFile=/home/barry/Videos/aspen_1920x1080_30.yuv --FrameRate=4 --SourceWidth=1920 --SourceHeight=1080 --RateControl=0 --QP=27 --IntraPeriodMax=30 --IntraPeriodMin=30 --NumberBFrames=7 --OutputFile=test.avs --ReconFile=. --frames=570 --thread_frames=1 --thread_rows=1 --OpenGOP=0 --preset=3 --Loglevel=-1 --RdoqLevel=0' (10 runs):

     102246.046795      task-clock (msec)         #    1.074 CPUs utilized            ( +-  0.37% )
            24,311      context-switches          #    0.238 K/sec                    ( +-  0.42% )
               479      cpu-migrations            #    0.005 K/sec                    ( +-  4.66% )
           102,365      page-faults               #    0.001 M/sec                    ( +-  0.00% )
   357,034,758,879      cycles                    #    3.492 GHz                      ( +-  0.08% )  (50.00%)
   641,587,921,821      instructions              #    1.80  insn per cycle           ( +-  0.02% )  (62.51%)
    46,253,361,658      branches                  #  452.373 M/sec                    ( +-  0.01% )  (62.47%)
     2,209,493,824      branch-misses             #    4.78% of all branches          ( +-  0.07% )  (62.49%)
   159,525,216,326      L1-dcache-loads           # 1560.209 M/sec                    ( +-  0.02% )  (62.48%)
    12,336,754,457      L1-dcache-load-misses     #    7.73% of all L1-dcache hits    ( +-  0.08% )  (62.51%)
     2,649,870,912      LLC-loads                 #   25.917 M/sec                    ( +-  0.35% )  (50.04%)
       198,941,707      LLC-load-misses           #    7.51% of all LL-cache hits     ( +-  0.43% )  (50.00%)

      95.179014357 seconds time elapsed                                          ( +-  0.38% )



./ffmpeg -i https://facedetectioncos-1251132611.cos.ap-guangzhou.myqcloud.com/test/20190108/h265_test.m3u8 -an -f null /dev/null  -loglevel 99
./ffmpeg -i https://facedetectioncos-1251132611.cos.ap-guangzhou.myqcloud.com/test/20190108/h265_test.m3u8 -f null /dev/null  -loglevel 99 // Fail
./ffmpeg -i https://facedetectioncos-1251132611.cos.ap-guangzhou.myqcloud.com/test/20190108/definesun/index_4000.m3u8 -an -f null /dev/null  -loglevel 99

https://superuser.com/questions/479063/ffmpeg-pipe-input-error/479064#479064

http://www.ipol.im/pub/art/2014/57/article.pdf
http://www.ipol.im/pub/art/2014/57/?utm_source=doi
http://www.ipol.im/pub/art/2011/bcm_nlm/

export PATH=$PATH:~/.local/bin

// Enable AVX2 in FFmpeg
./configure --enable-libxavs2 --enable-gpl --enable-libx264 --enable-libx265 --enable-openssl --enable-nonfree --disable-optimizations --extra-cflags=-mavx2
